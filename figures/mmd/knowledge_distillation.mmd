graph TB
    subgraph TeacherModel["Teacher Model: Video Diffusion"]
        A["Pretrained Diffusion<br/>D_œÜ(z_T, C_lidar)"]
        A --> B["Denoising Process<br/>x_{t-1} = Œº_Œ∏(x_t, C, t) + œÉ_t Œµ"]
        B --> C["High-Quality Synthesis<br/>I_pseudo ‚àà R^(3√óH√óW)"]
    end
    
    subgraph StudentModel["Student Model: 4D Gaussian Splatting"]
        D["4DGS Representation<br/>ùí¢ = {Œº, Œ£, Œ±, SH}"]
        D --> E["Differentiable Rendering<br/>I_render = R(ùí¢, œÄ)"]
        E --> F["Multi-component Output<br/>{I_full, I_bkgd, I_obj}"]
    end
    
    subgraph KnowledgeTransfer["Knowledge Transfer Mechanism"]
        C --> G["Pseudo Ground Truth<br/>Supervision Signal"]
        F --> H["Rendering Quality<br/>Assessment"]
        G --> I["Distillation Loss<br/>L_distill = ||I_render - I_pseudo||"]
        H --> I
        I --> J["Progressive Guidance<br/>s(k) = s_max - (s_max - s_min) √ó k/K"]
    end
    
    subgraph OptimizationLoop["Joint Optimization"]
        J --> K["Hybrid Loss Function<br/>L_total = L_recon + Œª_novel L_distill + L_reg"]
        K --> L["Gradient Computation<br/>‚àá_Œ∏ L_total"]
        L --> M["Parameter Update<br/>Œ∏ ‚Üê Œ∏ - Œ∑‚àáL"]
        M --> D
    end
    
    subgraph RegularizationTerms["Regularization Components"]
        N["Depth Consistency<br/>L_depth = ||D_render - D_lidar||"]
        O["Scale Regularization<br/>L_scale = min(s) + ||s_top2||¬≤/‚àès_top2 - 2"]
        P["Sky Region Loss<br/>L_sky = -E[log(1-Œ±_sky)]"]
        Q["Opacity Regularization<br/>Entropy-based Pruning"]
    end
    
    N --> K
    O --> K
    P --> K
    Q --> K
    
    classDef normalStyle fill:#FFFFFF,stroke:#999999,stroke-width:2px
    classDef importantStyle fill:#E3F2FD,stroke:#1976D2,stroke-width:2px
    
    class A,D,I,K importantStyle
    class B,C,E,F,G,H,J,L,M,N,O,P,Q normalStyle
