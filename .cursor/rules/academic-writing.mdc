---
description: 博士后学术论文写作规范
globs: ["data/**/*.tex", "*.tex"]
alwaysApply: true
---

# 博士后学术论文写作规范

本规则适用于"自动驾驶场景重建中的模型训练及渲染技术研究"博士后学术论文的写作。

## 1. 内容真实性原则（最高优先级，必须严格执行）

### 绝对原则
**严格遵守 code 目录内的实际内容，这是最重要的规则。**

### 禁止行为
- ❌ 禁止凭空编造任何代码、方法、实验结果或理论内容
- ❌ 禁止添加不存在于代码库中的功能或实现
- ❌ 禁止虚构数据、参数或配置
- ❌ 禁止臆测未实现的功能
- ❌ 禁止描述不存在的实验或测试
- ❌ 禁止引用不存在的文件、类、函数或变量

### 允许行为
- ✅ 只能基于已有的代码和文档进行准确描述和解释
- ✅ 可以对已有代码的功能和原理进行分析说明
- ✅ 可以引用代码中实际存在的变量、函数、类和方法
- ✅ 可以解释代码的数学原理和理论基础
- ✅ 可以分析代码的设计思路和实现细节

### 创新要求
- 除非用户明确提供新的想法或明确要求创新，否则不要添加任何虚构内容
- 如果需要补充理论说明，必须基于已有代码的实际逻辑推断，并保持极度谨慎
- 补充的理论必须与代码实现相符，不能脱离实际
- 理论描述应该能够在代码中找到对应的实现

### 沟通语言
- 用中文表达和交流
- 专业术语可保留英文或给出中英文对照

### 验证方法
- 在写作前必须先查看和确认代码目录中的实际内容
- 对于任何技术细节，都应该能够指出代码中的具体位置
- 如果不确定某个功能是否存在，应该先检查代码再描述

## 2. 学术语言规范

### 语言风格
- 使用严谨、正式的学术语言，符合博士后研究标准
- 避免口语化和随意表达
- 保持客观、第三人称视角
- 适当使用被动语态，强调研究工作而非研究者

### 表达要求
- 使用准确的技术术语和学术词汇
- 逻辑清晰，论证严密
- 避免主观臆断和情绪化表达
- 保持学术论文应有的严肃性

## 3. 数学符号标准

### 符号约定
- **向量**：小写粗体，如 `\boldsymbol{\mu}`, `\mathbf{x}`
- **矩阵**：大写粗体，如 `\mathbf{K}`, `\mathbf{T}`
- **标量**：普通斜体，如 `t`, `\alpha`
- **集合**：花体或空心体，如 `\mathcal{G}`, `\mathcal{P}`
- **张量**：大写粗体或花体，如 `\mathbf{X}`, `\mathcal{X}`

### 公式编号
- 所有重要公式必须使用 `\label{eq:...}` 编号
- 标签命名应该有意义，如 `\label{eq:gaussian_rendering}`
- 引用公式使用 `\eqref{eq:...}` 或 `式~\ref{eq:...}`

### 数学环境
- 单行公式使用 `equation` 环境
- 多行公式使用 `align` 或 `gather` 环境
- 避免使用 `$$...$$` 这种过时的语法
- 使用 `\begin{equation}...\end{equation}`

### 示例
```latex
\begin{equation}
\mathbf{C}(u,v) = \sum_{i=1}^{N} \mathbf{c}_i \alpha_i T_i \exp(-\frac{1}{2}\boldsymbol{\delta}_i^T \Sigma_i^{-1} \boldsymbol{\delta}_i)
\label{eq:gaussian_splatting}
\end{equation}
```

## 4. 引用和参考文献标准

### 引用命令
- 使用 `\cite{key}` 进行基本引用
- 使用 `\citep{key}` 进行括号内引用（natbib）
- 使用 `\citet{key}` 进行文本内引用（natbib）
- 不要手动书写引用格式，如"[1]"或"Zhang et al. (2023)"

### 引用位置
- 引用应该紧跟在需要支持的论断之后
- 多个引用使用逗号分隔：`\cite{key1,key2,key3}`
- 确保所有引用的文献都在 `ref/refs.bib` 中

### 引用格式一致性
- 保持全文引用风格统一
- 遵循国家标准或学校要求的引用格式

## 5. 图表规范

### 图片要求
- 所有图片必须使用 `\caption{}` 添加说明
- 所有图片必须使用 `\label{fig:...}` 标记
- 引用图片使用 `图~\ref{fig:...}`
- 图片说明应该清晰、完整，能够独立理解

### 图片位置
- 使用浮动体环境 `\begin{figure}[htbp]`
- 图片应在首次引用的段落附近
- 大图可以单独占一页

### 表格要求
- 所有表格必须使用 `\caption{}` 添加说明
- 所有表格必须使用 `\label{tab:...}` 标记
- 引用表格使用 `表~\ref{tab:...}`
- 使用 `booktabs` 包的三线表格式

### 示例
```latex
\begin{figure}[htbp]
  \centering
  \includegraphics[width=0.8\textwidth]{pdf/system_architecture.pdf}
  \caption{StreetCrafter系统架构图}
  \label{fig:system-architecture}
\end{figure}
```

## 6. 术语一致性

### 翻译规范
- 保持技术术语翻译的一致性
- 常用术语对照：
  - 4D Gaussian Splatting → 4D高斯溅射
  - Neural Radiance Field → 神经辐射场
  - Diffusion Model → 扩散模型
  - Knowledge Distillation → 知识蒸馏
  - LiDAR → 激光雷达

### 缩写使用
- 首次使用缩写时给出完整形式，如"4D Gaussian Splatting (4DGS)"
- 之后可以直接使用缩写
- 保持缩写在全文中的一致性

### 专业术语
- 全文使用统一的专业术语
- 避免同一概念使用不同表述
- 建立术语表，确保一致性

## 7. 章节结构

### 章节层级
- 使用正确的层级结构：
  - `\chapter{...}` - 章
  - `\section{...}` - 节
  - `\subsection{...}` - 小节
  - `\subsubsection{...}` - 子小节

### 章节数量限制
- **每章的一级section数量不超过7个**（不含"本章小结"）
- 如果内容较多，应该合并相关section
- 每个section下可以有多个subsection

### 章节组织
- 每章应有清晰的引言，说明本章的主要内容和组织结构
- 每章应有"本章小结"，总结本章的核心内容
- 确保章节之间的逻辑流畅，前后呼应
- 保持章节编号的一致性和正确性

### 交叉引用
- 章节引用使用 `第~\ref{chap:...}~章`
- 节引用使用 `第~\ref{sec:...}~节`
- 确保所有引用都正确更新

## 8. 代码引用规范

### 代码块格式
- 使用 `listings` 包或 `minted` 包
- 设置合适的语法高亮
- 添加行号便于引用
- 使用 `\caption` 和 `\label` 标记代码块

### 示例
```latex
\begin{lstlisting}[language=Python, caption={高斯渲染实现}, label={code:gaussian-rendering}]
def render_gaussian(mu, sigma, color, alpha):
    # 渲染实现
    pass
\end{lstlisting}
```

## 9. 质量检查清单

### 内容检查
- [ ] 所有技术描述都有代码支持
- [ ] 没有编造的功能或方法
- [ ] 所有参数和配置都是真实的
- [ ] 所有实验结果都有依据

### 格式检查
- [ ] 所有公式都有标签和编号
- [ ] 所有图表都有说明和标签
- [ ] 所有引用都正确无误
- [ ] 章节编号正确

### 语言检查
- [ ] 使用正式的学术语言
- [ ] 术语翻译一致
- [ ] 逻辑清晰严密
- [ ] 没有口语化表达

## 10. 常见问题

### Q: 如何描述未实现的功能？
A: 不要描述。只描述已经实现的功能。如果确实需要讨论，应该明确说明"未来工作"或"可能的扩展"。

### Q: 如何补充理论内容？
A: 理论内容必须与代码实现相符。可以解释代码背后的数学原理，但不能凭空添加与代码无关的理论。

### Q: 章节太多怎么办？
A: 合并相关的section，确保每章不超过7个一级section。可以将相关内容整合为subsection。

### Q: 如何确保内容真实性？
A: 在写作前先查看代码，确认功能存在。写作时引用具体的代码文件和函数。写作后再次验证。
